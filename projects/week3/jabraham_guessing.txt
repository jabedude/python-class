Name: Joshua Abraham
Date: 4 MAY 2017
Current Module: Python Programming
Project Name: High-Low Guessing Game


Project Goals:
        The goal of this project is to create a game where the user must guess a randomly generated number between 1 and 100.
        The program should handle non-integer inputs and advise the user when a guess is too low or high.


Considerations:
        - Ensure that the game handles and rejects guesses greater than 100 and less than 1
        - Use descriptive variable names
        - Ensure that the program only counts valid user guesses and prints that number at the end of the game
        - Print the random integer during testing and development to speed up the development process and ensure accuracy of tests.
        - Ensure code complies with PEP8 and instructor code style guidelines


Initial Design:
        The program is one .py file with a single function: main(). main() is the entry point of the program and handles all logic, exception handling, and user interaction.


Data Flow:
        Beginning in main(), the program generates a random number between 1 and 100, prints a banner, and asks the user for a guess. The number of valid guesses is incremented by one and the program enters a try..except block. The program attempts to convert the input to an int, and tests if the number is between 1 and 100. If either fails a ValueError exception is raised, an error message is displayed to the user advising them that their guess is invalid, and the number of valid guesses is decremented by one.
        main() checks if the user's number is equal to, greater than, or less than the random integer. Depending on the comparison, the program tells the user that their guess is correct, too high, or too low, respectively. If the user guessed correctly, then the number of valid guesses is displayed and the program exits.


Communication Protocol:
        N/A.


Potential Pitfalls:
        - Handling incorrect user input, including non-integers, spaces, etc.
        - Correct usage of if-else statements with regards to default cases.
        - Avoid repeatedly incrementing the number of valid guesses in the if..elif..else block.


Test Plan:
        User Test:
                - Guess number in one guess:
                        output should be success message with singular '1 guess' displayed.
                - Guess number in five valid guesses:
                        output should be success message with plural '5 guesses' displayed.
                - Give non-integer input:
                        output should be error message with user input displayed.
                - Give input greater than 100 and less than 1:
                        output should be error message with user input displayed.
                - Give mixed valid, invalid, and correct guess:
                        output should be success message with only number of valid guesses displayed.
                
        Test Cases:
                N/A.


Conclusion:
        The project successfully met all goals and followed all considerations. The program only increments and decrements the number of valid guesses once each, and in logical places. The program uses exceptions to handle non-integer and invalid (less than 1; greater than 100) input. The code complies with PEP8 and uses descriptive variable names.
        Future improvements might include coloring the error, success, and wrong guess messages for a better user experience. I would also like to handle ctrl-c/ctrl-d interrupts.