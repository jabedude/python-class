Name: Joshua Abraham
Date: 28APR17
Current Module: Python Programming
Project Name: 99 Bottles

Project Goals:
        This project aimed to write a program that programmatically prints the lyrics to the song "99 Bottles".
        The program prints every verse, in decreasing numeric order until it reaches 1 bottle.
        The lyrics for bottle 2 and 1 are different from the rest of the song.

Considerations:
        - Ensure that the song's verse only appears once in the program
        - Create a function to handle creation of verses
        - Ensure the verse creator function handles the last two verses correctly
        - Ensure that the code has all neccessary doc strings
        - Ensure code complies with PEP8 and instructor code style guidlines

Initial Design:
        My program is one .py file split into two functions: main() and generate_verse(). main() handles recieving/sanitizing user input, creating the bottle numbers, and printing each verse. generate_verse() recieves a bottle number from main(), formats a verse to return to main(), and handles the second-to-last and last verse cases.

Data Flow:
        The program's entry point is main(). It checks if the user supplied a command line argument, checks if the string is a number and not 0, and creates an integer from it. If the user did not supply an argument, the program moves on with a bottle number of 99. If the user supplied incorrect input, the program prints a usage statement and exits. Next, the program calls generate_verse() on each bottle number down to 1.
        generate_verse() takes the number supplied by main() and checks if it is 2 or 1 (second-to-last or last case respectively). Depending on the results of these checks, the program will string format the master_verse variable and return the formatted verse to main() which prints it.

Communication Protocol:
        N/A

Potential Pitfalls:
        - Correctly handling incorrect user input
        - Making sure the default number of starting bottles is 99

Test Plan:
        User Test:
                <Describe the steps taken for each user test.>
        Test Cases:
                <A brief overview of the test cases that you implemented.>
                python3 jabraham_bottles.py 2
                - Test passing user input of 2 to check if program correctly starts at the second-to-last verse
                python3 jabraham_bottles.py 1
                - Test passing user input of 1 to check if program correctly starts at the last verse
                python3 jabraham_bottles.py 99
                - Test passing user input of 99 to check if program correctly starts at 99, and prints all expected verses
                python3 jabraham_bottles.py -99
                - Test passing user input of -99 to check if program displays usage statement and exits
                python3 jabraham_bottles.py 0
                - Test passing user input of 0 to check if program displays usage statement and exits
                python3 jabraham_bottles.py
                - Test passing no input to check if program correctly starts at 99 and prints all expected verses
                python3 jabraham_bottles.py test
                - Test passing user input of test to check if program displays usage statement and exits

Conclusion:
        This project was a success. I was able to meet all objectives while staying PEP8 compliant and maximum code reuse. The program is readable, variable names are descriptive, and it flows logically.
        To imporove, I would like to use argparse to get command line input. argparse will handle usage statements, type casting, etc. I think the code would be more readable that way. Another improvement would be the readability of my string formatting in generate_verse().

